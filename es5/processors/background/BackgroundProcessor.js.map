{"version":3,"file":"BackgroundProcessor.js","sourceRoot":"","sources":["../../../lib/processors/background/BackgroundProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["import '@tensorflow/tfjs-backend-webgl';\nimport '@tensorflow/tfjs-backend-cpu';\nimport { ModelConfig, PersonInferenceConfig } from '@tensorflow-models/body-pix/dist/body_pix_model';\nimport { BodyPix, load as loadModel, SemanticPersonSegmentation } from '@tensorflow-models/body-pix';\nimport { Processor } from '../Processor';\nimport { Benchmark } from '../../utils/Benchmark';\nimport { Dimensions } from '../../types';\n\nimport {\n  BODYPIX_INFERENCE_DIMENSIONS,\n  DEBOUNCE,\n  HISTORY_COUNT,\n  INFERENCE_CONFIG,\n  MASK_BLUR_RADIUS,\n  MODEL_CONFIG,\n  MODEL_NAME,\n  PERSON_PROBABILITY_THRESHOLD,\n  TFLITE_LOADER_NAME,\n  TFLITE_LOADER_NAME_SIMD,\n  WASM_INFERENCE_DIMENSIONS,\n} from '../../constants';\n\n/**\n * @private\n */\nexport interface BackgroundProcessorOptions {\n  /**\n   * The VideoProcessors load assets dynamically depending on certain browser features.\n   * You need to serve all the assets and provide the root path so they can be referenced by the SDK.\n   * These assets can be copied from the `dist/build` folder which you can add as part of your deployment process.\n   * @example\n   * ```ts\n   * const virtualBackground = new VirtualBackgroundProcessor({\n   *   assetsPath: 'https://my-server-path/assets',\n   *   backgroundImage: img,\n   * });\n   * await virtualBackground.loadModel();\n   * ```\n   */\n  assetsPath: string;\n\n  /**\n   * @private\n   */\n  debounce?: number;\n\n  /**\n   * @private\n   */\n  historyCount?: number;\n\n  /**\n   * @private\n   */\n  inferenceConfig?: PersonInferenceConfig;\n\n  /**\n   * @private\n   */\n  inferenceDimensions?: Dimensions;\n\n  /**\n   * The blur radius to use when smoothing out the edges of the person's mask.\n   * @default\n   * ```html\n   * 3\n   * ```\n   */\n  maskBlurRadius?: number;\n\n  /**\n   * @private\n   */\n  personProbabilityThreshold?: number;\n\n  /**\n   * @private\n   */\n   useWasm?: boolean;\n}\n\n/**\n * @private\n */\nexport abstract class BackgroundProcessor extends Processor {\n  private static _model: BodyPix | null = null;\n  private static async _loadModel(config: ModelConfig = MODEL_CONFIG): Promise<void> {\n    BackgroundProcessor._model = await loadModel(config)\n      .catch((error: any) => console.error('Unable to load model.', error)) || null;\n  }\n  protected _outputCanvas: OffscreenCanvas;\n  protected _outputContext: OffscreenCanvasRenderingContext2D;\n\n  private _assetsPath: string;\n  private _benchmark: Benchmark;\n  private _currentMask: Uint8ClampedArray = new Uint8ClampedArray();\n  private _debounce: number = DEBOUNCE;\n  private _historyCount: number = HISTORY_COUNT;\n  private _inferenceConfig: PersonInferenceConfig = INFERENCE_CONFIG;\n  private _inferenceDimensions: Dimensions = WASM_INFERENCE_DIMENSIONS;\n  private _inputCanvas: HTMLCanvasElement;\n  private _inputContext: CanvasRenderingContext2D;\n  private _inputMemoryOffset: number = 0;\n  private _maskBlurRadius: number = MASK_BLUR_RADIUS;\n  private _maskCanvas: OffscreenCanvas;\n  private _maskContext: OffscreenCanvasRenderingContext2D;\n  private _masks: (Uint8ClampedArray | Uint8Array)[];\n  private _maskUsageCounter: number = 0;\n  private _outputMemoryOffset: number = 0;\n  private _personProbabilityThreshold: number = PERSON_PROBABILITY_THRESHOLD;\n  private _tflite: any;\n  private _useWasm: boolean;\n\n  constructor(options: BackgroundProcessorOptions) {\n    super();\n\n    if (typeof options.assetsPath !== 'string') {\n      throw new Error('assetsPath parameter is missing');\n    }\n    let assetsPath = options.assetsPath;\n    if (assetsPath && assetsPath[assetsPath.length - 1] !== '/') {\n      assetsPath += '/';\n    }\n\n    this.maskBlurRadius = options.maskBlurRadius!;\n    this._assetsPath = assetsPath;\n    this._debounce = options.debounce! || DEBOUNCE;\n    this._historyCount = options.historyCount! || HISTORY_COUNT;\n    this._inferenceConfig = options.inferenceConfig! || INFERENCE_CONFIG;\n    this._personProbabilityThreshold = options.personProbabilityThreshold! || PERSON_PROBABILITY_THRESHOLD;\n    this._useWasm = typeof options.useWasm === 'boolean' ? options.useWasm : true;\n    this._inferenceDimensions = options.inferenceDimensions! ||\n      (this._useWasm ? WASM_INFERENCE_DIMENSIONS : BODYPIX_INFERENCE_DIMENSIONS);\n\n    this._benchmark = new Benchmark();\n    this._inputCanvas = document.createElement('canvas');\n    this._inputContext = this._inputCanvas.getContext('2d') as CanvasRenderingContext2D;\n    this._maskCanvas = new OffscreenCanvas(1, 1);\n    this._maskContext = this._maskCanvas.getContext('2d') as OffscreenCanvasRenderingContext2D;\n    this._outputCanvas = new OffscreenCanvas(1, 1);\n    this._outputContext = this._outputCanvas.getContext('2d') as OffscreenCanvasRenderingContext2D;\n    this._masks = [];\n  }\n\n  /**\n   * The current blur radius when smoothing out the edges of the person's mask.\n   */\n  get maskBlurRadius(): number {\n    return this._maskBlurRadius;\n  }\n\n  /**\n   * Set a new blur radius to be used when smoothing out the edges of the person's mask.\n   */\n  set maskBlurRadius(radius: number) {\n    if (typeof radius !== 'number' || radius < 0) {\n      console.warn(`Valid mask blur radius not found. Using ${MASK_BLUR_RADIUS} as default.`);\n      radius = MASK_BLUR_RADIUS;\n    }\n    this._maskBlurRadius = radius;\n  }\n\n  /**\n   * Load the segmentation model.\n   * Call this method before attaching the processor to ensure\n   * video frames are processed correctly.\n   */\n   async loadModel() {\n    const [, tflite, modelResponse ] = await Promise.all([\n      BackgroundProcessor._loadModel(),\n      this._loadTwilioTfLite(),\n      fetch(this._assetsPath + MODEL_NAME),\n    ]);\n\n    const model = await modelResponse.arrayBuffer();\n    const modelBufferOffset = tflite._getModelBufferMemoryOffset();\n    tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);\n    tflite._loadModel(model.byteLength);\n\n    this._inputMemoryOffset = tflite._getInputMemoryOffset() / 4;\n    this._outputMemoryOffset = tflite._getOutputMemoryOffset() / 4;\n\n    this._tflite = tflite;\n  }\n\n  /**\n   * Apply a transform to the background of an input video frame and leaving\n   * the foreground (person(s)) untouched. Any exception detected will\n   * return a null value and will result in the frame being dropped.\n   */\n  async processFrame(inputFrame: OffscreenCanvas): Promise<OffscreenCanvas | null> {\n    if (!BackgroundProcessor._model || !this._tflite) {\n      return inputFrame;\n    }\n\n    this._benchmark.end('processFrame(jsdk)');\n    this._benchmark.start('processFrame(processor)');\n\n    this._benchmark.start('resizeInputImage');\n    const { width: captureWidth, height: captureHeight } = inputFrame;\n    const { width: inferenceWidth, height: inferenceHeight } = this._inferenceDimensions;\n    this._inputCanvas.width = inferenceWidth;\n    this._inputCanvas.height = inferenceHeight;\n    this._maskCanvas.width = inferenceWidth;\n    this._maskCanvas.height = inferenceHeight;\n    this._outputCanvas.width = captureWidth;\n    this._outputCanvas.height = captureHeight;\n    this._inputContext.drawImage(inputFrame, 0, 0, inferenceWidth, inferenceHeight);\n    const imageData = this._inputContext.getImageData(0, 0, inferenceWidth, inferenceHeight);\n    this._benchmark.end('resizeInputImage');\n\n    this._benchmark.start('segmentPerson');\n    let personMask: ImageData;\n\n    if (this._useWasm) {\n      personMask = this._createWasmPersonMask(imageData);\n    } else {\n      const segment = await BackgroundProcessor._model.segmentPerson(imageData, this._inferenceConfig);\n      personMask = this._createBodyPixPersonMask(segment);\n    }\n    this._benchmark.end('segmentPerson');\n\n    this._benchmark.start('imageCompositing');\n    this._maskContext.putImageData(personMask, 0, 0);\n    this._outputContext.save();\n    this._outputContext.filter = `blur(${this._maskBlurRadius}px)`;\n    this._outputContext.globalCompositeOperation = 'copy';\n    this._outputContext.drawImage(this._maskCanvas, 0, 0, captureWidth, captureHeight);\n    this._outputContext.filter = 'none';\n    this._outputContext.globalCompositeOperation = 'source-in';\n    this._outputContext.drawImage(inputFrame, 0, 0, captureWidth, captureHeight);\n    this._outputContext.globalCompositeOperation = 'destination-over';\n    this._setBackground(inputFrame);\n    this._outputContext.restore();\n\n    this._benchmark.end('imageCompositing');\n    this._benchmark.end('processFrame(processor)');\n    this._benchmark.end('processFrame');\n\n    // NOTE (csantos): Start the benchmark from here so we can include the delay from the Video sdk\n    // for a more accurate fps\n    this._benchmark.start('processFrame');\n    this._benchmark.start('processFrame(jsdk)');\n\n    return this._outputCanvas;\n  }\n\n  protected abstract _setBackground(inputFrame: OffscreenCanvas): void;\n\n  private _addMask(mask: Uint8ClampedArray | Uint8Array) {\n    if (this._masks.length >= this._historyCount) {\n      this._masks.splice(0, this._masks.length - this._historyCount + 1);\n    }\n    this._masks.push(mask);\n  }\n\n  private _applyAlpha(imageData: ImageData) {\n    const weightedSum = this._masks.reduce((sum, mask, j) => sum + (j + 1) * (j + 1), 0);\n    const pixels = imageData.height * imageData.width;\n    for (let i = 0; i < pixels; i++) {\n      const w = this._masks.reduce((sum, mask, j) => sum + mask[i] * (j + 1) * (j + 1), 0) / weightedSum;\n      imageData.data[i * 4 + 3] = Math.round(w * 255);\n    }\n  }\n\n  private _createBodyPixPersonMask(segment: SemanticPersonSegmentation) {\n    const { data, width, height } = segment;\n    const imageData = new ImageData(new Uint8ClampedArray(width * height * 4), width, height);\n\n    this._addMask(data);\n    this._applyAlpha(imageData);\n\n    return imageData;\n  }\n\n  private _createWasmPersonMask(resizedInputFrame: ImageData) {\n    const { _inferenceDimensions: { width, height }, _tflite: tflite } = this;\n    const pixels = width * height;\n\n    if (this._maskUsageCounter < 1) {\n      for (let i = 0; i < pixels; i++) {\n        tflite.HEAPF32[this._inputMemoryOffset + i * 3] = resizedInputFrame.data[i * 4] / 255;\n        tflite.HEAPF32[this._inputMemoryOffset + i * 3 + 1] = resizedInputFrame.data[i * 4 + 1] / 255;\n        tflite.HEAPF32[this._inputMemoryOffset + i * 3 + 2] = resizedInputFrame.data[i * 4 + 2] / 255;\n      }\n      tflite._runInference();\n      this._currentMask = new Uint8ClampedArray(pixels * 4);\n\n      for (let i = 0; i < pixels; i++) {\n        const personProbability = tflite.HEAPF32[this._outputMemoryOffset + i];\n        this._currentMask[i] = Number(personProbability >= this._personProbabilityThreshold) * personProbability;\n      }\n      this._maskUsageCounter = this._debounce;\n    }\n\n    this._addMask(this._currentMask);\n    this._applyAlpha(resizedInputFrame);\n\n    this._maskUsageCounter--;\n\n    return resizedInputFrame;\n  }\n\n  private _loadJs(url: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.onload = () => resolve();\n      script.onerror = reject;\n      document.head.append(script);\n      script.src = url;\n    });\n  }\n\n  private async _loadTwilioTfLite(): Promise<any> {\n    let tflite: any;\n    await this._loadJs(this._assetsPath + TFLITE_LOADER_NAME_SIMD);\n\n    try {\n      tflite = await window.createTwilioTFLiteSIMDModule();\n    } catch {\n      console.warn('SIMD not supported. You may experience poor quality of background replacement.');\n      await this._loadJs(this._assetsPath + TFLITE_LOADER_NAME);\n      tflite = await window.createTwilioTFLiteModule();\n    }\n    return tflite;\n  }\n}\n"]}