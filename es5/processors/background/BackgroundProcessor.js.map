{"version":3,"file":"BackgroundProcessor.js","sourceRoot":"","sources":["../../../lib/processors/background/BackgroundProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["import '@tensorflow/tfjs-backend-webgl';\nimport '@tensorflow/tfjs-backend-cpu';\nimport { ModelConfig, PersonInferenceConfig } from '@tensorflow-models/body-pix/dist/body_pix_model';\nimport { BodyPix, load as loadModel, SemanticPersonSegmentation } from '@tensorflow-models/body-pix';\nimport { INFERENCE_CONFIG, MASK_BLUR_RADIUS, MODEL_CONFIG, INFERENCE_RESOLUTION } from '../../constants';\nimport { Processor } from '../Processor';\nimport { Benchmark } from '../../utils/Benchmark';\nimport { Resolution } from '../../types';\n\nexport interface BackgroundProcessorOptions {\n  inferenceConfig?: PersonInferenceConfig;\n  inferenceResolution?: Resolution;\n  maskBlurRadius?: number;\n}\n\nexport abstract class BackgroundProcessor extends Processor {\n  private static _model: BodyPix | null = null;\n  private static async _loadModel(config: ModelConfig = MODEL_CONFIG): Promise<void> {\n    BackgroundProcessor._model = await loadModel(config)\n      .catch((error: any) => console.error('Unable to load model.', error)) || null;\n  }\n  protected _outputCanvas: OffscreenCanvas;\n  protected _outputContext: OffscreenCanvasRenderingContext2D;\n\n  private _benchmark: Benchmark;\n  private _inferenceConfig: PersonInferenceConfig = INFERENCE_CONFIG;\n  private _inferenceResolution: Resolution = INFERENCE_RESOLUTION;\n  private _inputCanvas: HTMLCanvasElement;\n  private _inputContext: CanvasRenderingContext2D;\n  private _maskBlurRadius: number = MASK_BLUR_RADIUS;\n  private _maskCanvas: OffscreenCanvas;\n  private _maskContext: OffscreenCanvasRenderingContext2D;\n\n  constructor(options?: BackgroundProcessorOptions) {\n    super();\n    this.inferenceConfig = options?.inferenceConfig!;\n    this.inferenceResolution = options?.inferenceResolution!;\n    this.maskBlurRadius = options?.maskBlurRadius!;\n\n    this._benchmark = new Benchmark();\n    this._inputCanvas = document.createElement('canvas');\n    this._inputContext = this._inputCanvas.getContext('2d') as CanvasRenderingContext2D;\n    this._maskCanvas = new OffscreenCanvas(1, 1);\n    this._maskContext = this._maskCanvas.getContext('2d') as OffscreenCanvasRenderingContext2D;\n    this._outputCanvas = new OffscreenCanvas(1, 1);\n    this._outputContext = this._outputCanvas.getContext('2d') as OffscreenCanvasRenderingContext2D;\n\n    BackgroundProcessor._loadModel();\n  }\n\n  get benchmark(): Benchmark {\n    return this._benchmark;\n  }\n\n  get inferenceConfig(): PersonInferenceConfig {\n    return this._inferenceConfig;\n  }\n\n  set inferenceConfig(config: PersonInferenceConfig) {\n    if (!config || !Object.keys(config).length) {\n      console.warn('Inference config not found. Using defaults.');\n      config = INFERENCE_CONFIG;\n    }\n    this._inferenceConfig = config;\n  }\n\n  get inferenceResolution(): Resolution {\n    return this._inferenceResolution;\n  }\n\n  set inferenceResolution(resolution: Resolution) {\n    if (!resolution || !resolution.height || !resolution.width) {\n      console.warn('Valid inference resolution not found. Using defaults');\n      resolution = INFERENCE_RESOLUTION;\n    }\n    this._inferenceResolution = resolution;\n  }\n\n  get maskBlurRadius(): number {\n    return this._maskBlurRadius;\n  }\n\n  set maskBlurRadius(radius: number) {\n    if (!radius) {\n      console.warn(`Valid mask blur radius not found. Using ${MASK_BLUR_RADIUS} as default.`);\n      radius = MASK_BLUR_RADIUS;\n    }\n    this._maskBlurRadius = radius;\n  }\n\n  async processFrame(inputFrame: OffscreenCanvas): Promise<OffscreenCanvas | null> {\n    if (!BackgroundProcessor._model) {\n      return inputFrame;\n    }\n\n    this._benchmark.end('processFrame(jsdk)');\n    this._benchmark.start('processFrame(processor)');\n\n    this._benchmark.start('resizeInputImage');\n    const { width: captureWidth, height: captureHeight } = inputFrame;\n    const { width: inferenceWidth, height: inferenceHeight } = this._inferenceResolution;\n    this._inputCanvas.width = inferenceWidth;\n    this._inputCanvas.height = inferenceHeight;\n    this._maskCanvas.width = inferenceWidth;\n    this._maskCanvas.height = inferenceHeight;\n    this._outputCanvas.width = captureWidth;\n    this._outputCanvas.height = captureHeight;\n    this._inputContext.drawImage(inputFrame, 0, 0, inferenceWidth, inferenceHeight);\n    const imageData = this._inputContext.getImageData(0, 0, inferenceWidth, inferenceHeight);\n    this._benchmark.end('resizeInputImage');\n\n    this._benchmark.start('segmentPerson');\n    const segment = await BackgroundProcessor._model.segmentPerson(imageData, this._inferenceConfig);\n    this._benchmark.end('segmentPerson');\n\n    this._benchmark.start('imageCompositing');\n    this._maskContext.putImageData(this._createPersonMask(segment), 0, 0);\n    this._outputContext.save();\n    this._outputContext.filter = `blur(${this._maskBlurRadius}px)`;\n    this._outputContext.globalCompositeOperation = 'copy';\n    this._outputContext.drawImage(this._maskCanvas, 0, 0, captureWidth, captureHeight);\n    this._outputContext.filter = 'none';\n    this._outputContext.globalCompositeOperation = 'source-in';\n    this._outputContext.drawImage(inputFrame, 0, 0, captureWidth, captureHeight);\n    this._outputContext.globalCompositeOperation = 'destination-over';\n    this._setBackground(inputFrame);\n    this._outputContext.restore();\n\n    this._benchmark.end('imageCompositing');\n    this._benchmark.end('processFrame(processor)');\n    this._benchmark.end('processFrame');\n\n    // NOTE (csantos): Start the benchmark from here so we can include the delay from the Video sdk\n    // for a more accurate fps\n    this._benchmark.start('processFrame');\n    this._benchmark.start('processFrame(jsdk)');\n\n    return this._outputCanvas;\n  }\n\n  protected abstract _setBackground(inputFrame: OffscreenCanvas): void;\n\n  private _createPersonMask(segment: SemanticPersonSegmentation) {\n    const { data, width, height } = segment;\n    const segmentMaskData = new Uint8ClampedArray(width * height * 4);\n    for (let i = 0; i < data.length; i++) {\n      const m = i << 2;\n      segmentMaskData[m] = segmentMaskData[m + 1] = segmentMaskData[m + 2] = segmentMaskData[m + 3] =\n        data[i] * 255;\n    }\n    return new ImageData(segmentMaskData, width, height);\n  }\n}\n"]}